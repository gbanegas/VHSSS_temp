

# This file was *autogenerated* from the file main_lhss.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3911 = Integer(3911); _sage_const_64 = Integer(64); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_5 = Integer(5); _sage_const_0 = Integer(0)
load("client_lhss.sage")
load("server_lhss.sage")
load("additive_lhss.sage")
load("utils.sage")
load("hash.sage")

q = _sage_const_3911 
FIELD = GF(q)

lvhss = LHSVHSSAdditive()

security = _sage_const_64 
p,q = generate_safe_primes(security)
N = p*q
print("p: {} - q: {}".format(p,q))
print("N: {}".format(N))

nr_clients = _sage_const_4 
nr_servers = _sage_const_3 
t = _sage_const_2 
secret_key, verification_key = lvhss.setup(security,N,nr_clients)

client_1 = Client(_sage_const_1 , [_sage_const_2 ], t, verification_key[_sage_const_2 ], lvhss )
client_2 = Client(_sage_const_2 , [_sage_const_3 ], t, verification_key[_sage_const_2 ], lvhss )
client_3 = Client(_sage_const_3 , [_sage_const_4 ], t, verification_key[_sage_const_2 ], lvhss )
client_4 = Client(_sage_const_4 , [_sage_const_5 ], t, verification_key[_sage_const_2 ], lvhss )


shares_c_1 = client_1.generate_shares(nr_servers)
shares_c_2 = client_2.generate_shares(nr_servers)
shares_c_3 = client_3.generate_shares(nr_servers)
shares_c_4 = client_4.generate_shares(nr_servers)

print(shares_c_1)
print(shares_c_2)
print(shares_c_3)
print(shares_c_4)

server_1 = Server(_sage_const_1 , lvhss)
server_2 = Server(_sage_const_2 , lvhss)
server_3 = Server(_sage_const_3 , lvhss)

server_1.set_share(_sage_const_1 , shares_c_1[_sage_const_1 ])
server_1.set_share(_sage_const_2 , shares_c_2[_sage_const_1 ])
server_1.set_share(_sage_const_3 , shares_c_3[_sage_const_1 ])
server_1.set_share(_sage_const_4 , shares_c_4[_sage_const_1 ])

server_2.set_share(_sage_const_1 , shares_c_1[_sage_const_2 ])
server_2.set_share(_sage_const_2 , shares_c_2[_sage_const_2 ])
server_2.set_share(_sage_const_3 , shares_c_3[_sage_const_2 ])
server_2.set_share(_sage_const_4 , shares_c_4[_sage_const_2 ])

server_3.set_share(_sage_const_1 , shares_c_1[_sage_const_3 ])
server_3.set_share(_sage_const_2 , shares_c_2[_sage_const_3 ])
server_3.set_share(_sage_const_3 , shares_c_3[_sage_const_3 ])
server_3.set_share(_sage_const_4 , shares_c_4[_sage_const_3 ])
print("shares s1: {}".format(server_1.get_shares()))
print("shares s2: {}".format(server_2.get_shares()))
print("shares s3: {}".format(server_3.get_shares()))


partial_eval_1  = lvhss.partial_eval(_sage_const_1 , server_1.get_shares(), nr_clients)
partial_eval_2  = lvhss.partial_eval(_sage_const_2 , server_2.get_shares(), nr_clients)
partial_eval_3  = lvhss.partial_eval(_sage_const_3 , server_3.get_shares(), nr_clients)

print("Partial eval server 1: {}".format(partial_eval_1))
print("Partial eval server 2: {}".format(partial_eval_2))
print("Partial eval server 3: {}".format(partial_eval_3))

final_eval = lvhss.final_eval(nr_servers)

partial_proof_1 = lvhss.partial_proof(secret_key, verification_key, _sage_const_3 , _sage_const_2 +_sage_const_1 , _sage_const_1 )
partial_proof_2 = lvhss.partial_proof(secret_key, verification_key, _sage_const_3 , _sage_const_3 +_sage_const_1 , _sage_const_2 )
partial_proof_3 = lvhss.partial_proof(secret_key, verification_key, _sage_const_3 , _sage_const_4 +_sage_const_1 , _sage_const_3 )
#R_i = ceil(3/(q-1))*(q-1)-3
phi = (secret_key[_sage_const_0 ]-_sage_const_1 )*(secret_key[_sage_const_1 ]-_sage_const_1 )
R_i = ceil(_sage_const_3 /(phi))*(phi)-_sage_const_3 
partial_proof_4 = lvhss.partial_proof(secret_key, verification_key, _sage_const_1 , _sage_const_5 +R_i, _sage_const_4 )

print("Partial proof c 1: {}".format(partial_proof_1))
print("Partial proof c 2: {}".format(partial_proof_2))
print("Partial proof c 3: {}".format(partial_proof_3))
print("Partial proof c 4: {}".format(partial_proof_4))

list_proofs = [partial_proof_1, partial_proof_2, partial_proof_3,partial_proof_4]
final_proof_test = lvhss.final_proof(verification_key, list_proofs, nr_clients)

print("Final Proof: {}".format(final_proof_test))

lvhss.verify(verification_key, final_proof_test, final_eval, q)


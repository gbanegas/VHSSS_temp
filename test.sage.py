

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3911 = Integer(3911); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_64 = Integer(64); _sage_const_2 = Integer(2)
q = _sage_const_3911 
FIELD = GF(q)

t = _sage_const_3 
g = FIELD(_sage_const_3 )

nr_clients=_sage_const_4 

load("client.sage")
load("server.sage")
load("additive_lhss.sage")
load("utils.sage")
load("hash.sage")

list_of_elements = []
j=_sage_const_0 
for i in range(q):
  result1 = H(i, q) #bijection function
  if result1 not in list_of_elements:
    list_of_elements.append(result1)
    j=j+_sage_const_1 
  else:
    print("i: {} - result: {}".format(i, result1))
    print("not bijection")
  print("j is {}".format( j))


security = _sage_const_64 
l = security/_sage_const_2 
prime=random_prime(_sage_const_2 **l-_sage_const_1 , false, _sage_const_2 **(l-_sage_const_1 ))#Added here to generate a prime used for creating a field for the injective function of setup
p,q = generate_safe_primes(security)
N = p*q
print("p: {} - q: {}".format(p,q))
print("N: {}".format(N))

lvhss = LHSVHSSAdditive()
lvhss.setup(security,N,nr_clients)#test the function setup
print ("Hash function output is:{}".format(H(_sage_const_3 ,prime)))


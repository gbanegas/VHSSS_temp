

# This file was *autogenerated* from the file main_tss.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3911 = Integer(3911); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_1 = Integer(1); _sage_const_11 = Integer(11); _sage_const_6 = Integer(6)
load("additive_tss.sage")
load("utils.sage")

#test

f = _sage_const_3911 
FIELD = GF(f)

t = _sage_const_4 
g = FIELD(_sage_const_3 )

nr_clients = _sage_const_5 
threshold = _sage_const_3 
nr_servers= _sage_const_4 +_sage_const_2 
g = FIELD(_sage_const_3 )
k_security = _sage_const_64  #just to test
#p,q need to be safe primes 
p, q = generate_safe_primes(k_security)
p = (_sage_const_2 *p+_sage_const_1 )
q = (_sage_const_2 *q+_sage_const_1 )
N = p*q




print("p: {}  \n q: {}".format(p,q))
print("(p-1)/2: {}  \n (q-1)/2: {}".format((p-_sage_const_1 )/_sage_const_2 ,(q-_sage_const_1 )/_sage_const_2 ))
vhss = VHSS_TSS()

private_keys = {}
public_keys = {}

for i in range(_sage_const_1 , nr_clients+_sage_const_1 ):
    public_key, private_key = vhss.setup(k_security, p, q, nr_clients, threshold)
    private_keys[i] = private_key
    public_keys[i] = public_key


print("pk: {} \n sk: {}".format(public_key, private_key))


#rsa test:
m = _sage_const_11 
n = p*q
c = m.powermod(public_key, n)
print("c = {}".format(c))
m_prime = c.powermod(private_key, n)
print("m_prime = {}".format(m_prime))
#--------


shares1, shared_key1, A_1, H_1  = vhss.gen_secret_share_additive_with_threshold_ss(_sage_const_1 , [_sage_const_1 ], t, private_keys[_sage_const_1 ], _sage_const_1 , nr_servers, threshold, N, g, public_keys[_sage_const_1 ])

shares2, shared_key2, A_2, H_2  = vhss.gen_secret_share_additive_with_threshold_ss(_sage_const_2 , [_sage_const_2 ], t, private_keys[_sage_const_2 ], _sage_const_1 , nr_servers, threshold, N,g, public_keys[_sage_const_2 ])

shares3, shared_key3, A_3, H_3  = vhss.gen_secret_share_additive_with_threshold_ss(_sage_const_3 , [_sage_const_3 ], t, private_keys[_sage_const_3 ], _sage_const_1 , nr_servers, threshold,N, g, public_keys[_sage_const_3 ])

shares4, shared_key4, A_4, H_4  = vhss.gen_secret_share_additive_with_threshold_ss(_sage_const_4 , [_sage_const_5 ], t, private_keys[_sage_const_4 ], _sage_const_1 , nr_servers, threshold, N,g, public_keys[_sage_const_4 ])


#phi = (p-1)*(q-1)
#R_i = ceil(R_is/(q-1))*(q-1)-R_is
R_i = ceil(_sage_const_4 /(f-_sage_const_1 ))*(f-_sage_const_1 )-_sage_const_4  #here we are reducing modulo the field since all the values are in the FIELD. 

shares5, shared_key5, A_5, H_5  = vhss.gen_secret_share_additive_with_threshold_ss(_sage_const_5 , [_sage_const_3 ], t, private_keys[_sage_const_5 ], R_i, nr_servers, threshold, N,g,public_keys[_sage_const_5 ])


print ("shares 1: {}".format(shares1))
print ("shares 2: {}".format(shares2))
print ("shares 3: {}".format(shares3))
print ("shares 4: {}".format(shares4))


#below we create lists with what each server has
servers = {}
for j in range(_sage_const_1 , nr_servers+_sage_const_1 ):
    server_share = {}
    server_share[_sage_const_1 ] = shares1[j]
    server_share[_sage_const_2 ] = shares2[j]
    server_share[_sage_const_3 ] = shares3[j]
    server_share[_sage_const_4 ] = shares4[j]
    server_share[_sage_const_5 ] = shares5[j]
    servers[j] = server_share
        
      

omegas = {}
H_is = {}
A_is = {}
omegas[_sage_const_1 ] =shared_key1
omegas[_sage_const_2 ] =shared_key2
omegas[_sage_const_3 ] =shared_key3
omegas[_sage_const_4 ] =shared_key4
omegas[_sage_const_5 ] =shared_key5
H_is[_sage_const_1 ] = H_1
H_is[_sage_const_2 ] = H_2
H_is[_sage_const_3 ] = H_3
H_is[_sage_const_4 ] = H_4
H_is[_sage_const_5 ] = H_5

A_is[_sage_const_1 ] = A_1
A_is[_sage_const_2 ] = A_2
A_is[_sage_const_3 ] = A_3
A_is[_sage_const_4 ] = A_4
A_is[_sage_const_5 ] = A_5

#print("shares: {}".format(shares))
print("shared_key: {}".format(omegas))
print("A_is: {}".format(A_is))
print("H_is: {}".format(H_is))


print("servers: {}".format(servers[_sage_const_1 ]))

partial_eval1 = vhss.partial_eval(_sage_const_1 , servers[_sage_const_1 ], nr_clients)
partial_eval2 = vhss.partial_eval(_sage_const_2 , servers[_sage_const_2 ], nr_clients)
partial_eval3 = vhss.partial_eval(_sage_const_3 , servers[_sage_const_3 ], nr_clients)
partial_eval4 = vhss.partial_eval(_sage_const_4 , servers[_sage_const_4 ], nr_clients)
partial_eval5 = vhss.partial_eval(_sage_const_5 , servers[_sage_const_5 ], nr_clients)
partial_eval6 = vhss.partial_eval(_sage_const_6 , servers[_sage_const_6 ], nr_clients)

final_eval = vhss.final_eval(nr_servers)
print("final_eval : {}".format(final_eval))

partial_proofs = vhss.partial_proof(omegas, H_is, A_is, N, threshold,nr_clients)



print("partial_proofs = {}".format(partial_proofs))

print("It works until now!!!!!!!!!!!!!")
print("H_is: {}".format(H_is))

final_proof_test = vhss.final_proof( public_keys, H_is, A_is, partial_proofs, threshold, N)

print("final_proof: {}".format(final_proof_test))

result_verify = vhss.verify(nr_clients, H_is, final_proof_test, final_eval)
print ("result of the verify function is:", result_verify)

